# docker-composeのバージョンを指定
version: "3.9"

# db(MySQL),app(Django)のコンテナを作成
services:
  db:
    image: mysql:8
    container_name: database-google-ad-helper # phpMyAdminサービスのPMA_HOSTSに設定する
    environment:
      MYSQL_ROOT_PASSWORD: ${ROOTPASS}
      MYSQL_DATABASE: ${DATABASE}
      MYSQL_USER: ${USERNAME}
      MYSQL_PASSWORD: ${USERPASS}
      TZ: 'Asia/Tokyo'
      LC_ALL: 'ja_JP.UTF-8'
      LANG: "ja_JP.UTF-8"
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    env_file:
      - .env
    volumes:
      - ./containers/db/data:/var/lib/mysql
      - ./containers/db/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - ${PORT}:3306
    expose:
      - ${PORT}

  fastApi:
    # コンテナ名をappに設定
    container_name: "google-ad-helper-containers"
    image: "google-ad-helper-image"
    build:
      context: .
      dockerfile: containers/fast_api/local/Dockerfile
    tty: true
    working_dir: /app
    volumes:
      - ./python:/app
      - ./containers/fast_api/requirements.txt:/tmp/requirements.txt
    ports:
      - "8000:8000"
    command: sh /tmp/entrypoint.sh
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  nextjs:
    container_name: "chat-gpt-management-nextjs-containers"
    image: "chat-gpt-management-nextjs-containers"
    build:
      context: .
      dockerfile: ./containers/nextjs/local/Dockerfile
    working_dir: /var/www/html
    volumes:
      - ./nextjs:/var/www/html
    tty: true
    command: sh /tmp/entrypoint.sh
    env_file:
      - .env
    ports:
      - "3000:3000"

  nginx:
    container_name: "ecs-fargate-nginx-container"
    image: "chat-gpt-management-nginx-image"
    build:
      context: .
      dockerfile: ./containers/nginx/env/local/Dockerfile
    working_dir: /var/www/html
    volumes:
      - ./containers/nginx/conf.d/local/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - fastApi
      - nextjs

volumes:
  db_data:
  static:
